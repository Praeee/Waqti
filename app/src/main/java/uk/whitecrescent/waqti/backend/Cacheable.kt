package uk.whitecrescent.waqti.backend

import uk.whitecrescent.waqti.FinalSince
import uk.whitecrescent.waqti.WaqtiVersion
import uk.whitecrescent.waqti.backend.task.ID

/**
 * A Cacheable is any object that can be persisted in the ObjectBox Database and can thus be
 * placed in any Cache. In ObjectBox these are declared by the annotation `@Entity`.
 * Cacheables share properties that are used to help with the persistence and initialization of
 * the ObjectBox database and the Caches.
 *
 * Implementations must also have a `name` field in the constructor to be used as a
 * human-readable non-unique identifier for the Cacheable and also to be used to determine
 * whether this object is automatically generated by ObjectBox or not, see [notDefault].
 *
 * Implementations must have their `init` block look like the following (after ALL fields):
 * ```
 *      init {
 *          if (notDefault()) {
 *              update()
 *              initialize()
 *          }
 *      }
 * ```
 *
 * For reference, here is the current list of implemented Cacheables in Waqti as of 02-Feb-19:
 * * [uk.whitecrescent.waqti.backend.task.Task]
 * * [uk.whitecrescent.waqti.backend.task.Label]
 * * [uk.whitecrescent.waqti.backend.task.Priority]
 * * [uk.whitecrescent.waqti.backend.task.Template]
 * * [uk.whitecrescent.waqti.backend.task.TimeUnit]
 * * [uk.whitecrescent.waqti.backend.collections.TaskList]
 * * [uk.whitecrescent.waqti.backend.collections.Board]
 * * [uk.whitecrescent.waqti.backend.collections.BoardList]
 *
 * @see uk.whitecrescent.waqti.backend.persistence.Cache
 * @see uk.whitecrescent.waqti.backend.persistence.Caches
 * @see uk.whitecrescent.waqti.backend.persistence.Database
 */
@FinalSince(WaqtiVersion.FEB_2019)
interface Cacheable {

    /**
     * The ID of this object as given by ObjectBox.
     * All objects initially have an ID of 0 at creation time before they will be reassigned
     * their actual IDs. Each object inside any Cache will have a unique ID such that no two
     * objects inside the same Cache contain the same ID.
     *
     * @see ID
     */
    var id: ID

    /**
     * The name of this object, every [Cacheable] must have a name to be used as a human-readable
     * identifier, the default name is the blank String ""
     */
    var name: String

    /**
     * Used to show that this object is not one automatically created by ObjectBox.
     * The way ObjectBox creates objects from the Database, is it creates objects at runtime with
     * all the default values for its fields, this is a generated object and should not be
     * persisted as it is will eventually have all its fields changed to what they should be from
     * the Database.
     *
     * We use this function to determine this, in most cases this would mean that
     * the ID is not 0 and the name is not blank (or the default name) in addition to any other
     * fields in the object's constructor, making sure they are not equal to their default values.
     */
    fun notDefault(): Boolean {
        return this.name != "" || this.id != 0L
    }

    /**
     * Used to persist or update this object into the Database.
     * Call this to commit any pending changes to an object in ObjectBox.
     *
     * Implementations must put this object into the correct Cache to be updated, usually being
     * one line such as `Caches.tasks.put(this)`
     *
     * @see uk.whitecrescent.waqti.backend.persistence.Caches
     */
    fun update()

    /**
     * Used to run any initialization code required to run when an object is instantiated, either
     * if it is existing from the Database or when created anew. See the [Cacheable]
     * documentation for the general rules on this.
     * Here you can tell any Observers in this object to begin observing.
     *
     * @see uk.whitecrescent.waqti.backend.persistence.Cache.initialize
     */
    fun initialize()

}